"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r=e(require("pg-promise")),t=require("itee-validators"),n=e(require("path")),s=require("buffer"),a=e(require("fs")),i=require("stream");console.log("Itee.Database v8.0.2 - EsModule");
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TDatabaseController
 * @classdesc The TDatabaseController is the base class to perform CRUD operations on the database
 */
class o{static __checkData(e,r,n){const s=r.body,a=r.params,i=r.query;return t.isDefined(s)&&s[e]?s[e]:t.isDefined(a)&&a[e]?a[e]:t.isDefined(i)&&i[e]?i[e]:void o.returnError({title:"Erreur de paramètre",message:`${e} n'existe pas dans les paramètres !`},n)}static _formatError(e){let r=[];if(t.isArray(e))for(let t=0,n=e.length;t<n;++t)r=r.concat(o._formatError(e[t]));else if(t.isObject(e))if("ValidationError"===e.name){let t="",n=e.errors;for(let e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t+=n[e].message+"<br>");r.push({title:"Erreur de validation",message:t||"Aucun message d'erreur... Gloups !"})}else"VersionError"===e.name?r.push({title:"Erreur de base de donnée",message:"Aucun document correspondant n'as put être trouvé pour la requete !"}):r.push({title:e.title||"Erreur",message:e.message||"Aucun message d'erreur... Gloups !"});else{if(!t.isString(e))throw new Error(`Unknown error type: ${e} !`);r.push({title:"Erreur",message:e})}return r}static returnNotFound(e){if(t.isFunction(e))return e();e.headersSent||e.status(204).end()}static returnError(e,r){if(t.isFunction(r))return r(e,null);if(r.headersSent)return;const n=o._formatError(e);r.format({"application/json":()=>{r.status(500).json(n)},default:()=>{r.status(406).send("Not Acceptable")}})}static returnData(e,r){if(t.isFunction(r))return r(null,e);if(r.headersSent)return;const n=t.isArray(e)?e:[e];r.format({"application/json":()=>{r.status(200).json(n)},default:()=>{r.status(406).send("Not Acceptable")}})}static returnErrorAndData(e,r,n){if(t.isFunction(n))return n(e,r);if(n.headersSent)return;const s={errors:e,datas:r};n.format({"application/json":()=>{n.status(416).json(s)},default:()=>{n.status(416).send("Range Not Satisfiable")}})}constructor(e={}){const r={driver:null,useNext:!1,...e};this._driver=r.driver,this._useNext=r.useNext}return(e,r={}){const n=Object.assign({immediate:null,beforeAll:null,beforeReturnErrorAndData:null,afterReturnErrorAndData:null,beforeReturnError:null,afterReturnError:null,beforeReturnData:null,afterReturnData:null,beforeReturnNotFound:null,afterReturnNotFound:null,afterAll:null},r,{returnErrorAndData:o.returnErrorAndData.bind(this),returnError:o.returnError.bind(this),returnData:o.returnData.bind(this),returnNotFound:o.returnNotFound.bind(this)});return n.immediate&&n.immediate(),function(r=null,s=null){const a=t.isDefined(s),i=t.isDefined(r);n.beforeAll&&n.beforeAll(),a&&i?(n.beforeReturnErrorAndData&&n.beforeReturnErrorAndData(r,s),n.returnErrorAndData(r,s,e),n.afterReturnErrorAndData&&n.afterReturnErrorAndData(r,s)):a&&!i?(n.beforeReturnData&&n.beforeReturnData(s),n.returnData(s,e),n.afterReturnData&&n.afterReturnData(s)):!a&&i?(n.beforeReturnError&&n.beforeReturnError(r),n.returnError(r,e),n.afterReturnError&&n.afterReturnError(r)):a||i||(n.beforeReturnNotFound&&n.beforeReturnNotFound(),n.returnNotFound(e),n.afterReturnNotFound&&n.afterReturnNotFound()),n.afterAll&&n.afterAll()}}create(e,r,n){const s=e.body;t.isNotDefined(s)?o.returnError({title:"Erreur de paramètre",message:"Le corps de la requete ne peut pas être null ou indefini."},this._useNext?n:r):t.isArray(s)?t.isEmptyArray(s)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'objet de la requete ne peut pas être vide."},this._useNext?n:r):this._createMany(s,r,n):t.isObject(s)?t.isEmptyObject(s)?o.returnError({title:"Erreur de paramètre",message:"L'objet de la requete ne peut pas être vide."},this._useNext?n:r):this._createOne(s,r,n):o.returnError({title:"Erreur de paramètre",message:"Le type de donnée de la requete est invalide. Les paramètres valides sont objet ou un tableau d'objet."},this._useNext?n:r)}_createOne(){}_createMany(){}read(e,r,n){const s=e.params.id,a=e.body,i=t.isDefined(a),u=i?a.ids:null,l=i?a.query:null,d=i?a.projection:null;t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._readOne(s,d,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._readMany(u,d,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._readAll(d,r,n):this._readWhere(l,d,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être null."},this._useNext?n:r)}_readOne(){}_readMany(){}_readWhere(){}_readAll(){}update(e,r,n){const s=e.params.id,a=e.body,i=t.isDefined(a),u=i?a.ids:null,l=i?a.query:null,d=i?a.update:null;t.isNotDefined(d)?o.returnError({title:"Erreur de paramètre",message:"La mise à jour a appliquer ne peut pas être null ou indefini."},this._useNext?n:r):t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._updateOne(s,d,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._updateMany(u,d,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._updateAll(d,r,n):this._updateWhere(l,d,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être vide."},this._useNext?n:r)}_updateOne(){}_updateMany(){}_updateWhere(){}_updateAll(){}delete(e,r,n){const s=e.params.id,a=e.body,i=t.isDefined(a),u=i?a.ids:null,l=i?a.query:null;t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._deleteOne(s,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._deleteMany(u,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._deleteAll(r,n):this._deleteWhere(l,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être vide."},this._useNext?n:r)}_deleteOne(){}_deleteMany(){}_deleteWhere(){}_deleteAll(){}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class u extends i.Writable{constructor(e){super(e);const r=e.bufferSize||s.kStringMaxLength;this.memoryBuffer=Buffer.alloc(r),this.offset=0}_final(e){e()}_write(e,r,t){const n=Buffer.isBuffer(e)?e:new Buffer(e,r);for(let e=0,r=n.length;e<r;e++)this.memoryBuffer[this.offset]=n[e],this.offset++;t()}_writev(e,r){for(let r=0,t=e.length;r<t;r++)this.memoryBuffer=Buffer.concat([this.memoryBuffer,e[r]]);r()}_releaseMemory(){this.memoryBuffer=null}toArrayBuffer(){const e=this.memoryBuffer,r=new ArrayBuffer(e.length),t=new Uint8Array(r);for(let r=0;r<e.length;++r)t[r]=e[r];return this._releaseMemory(),r}toJSON(){return JSON.parse(this.toString())}toString(){const e=this.memoryBuffer.toString();return this._releaseMemory(),e}}class l{constructor(e={}){const r={dumpType:l.DumpType.ArrayBuffer,...e};this.dumpType=r.dumpType,this._isProcessing=!1,this._queue=[]}get dumpType(){return this._dumpType}set dumpType(e){if(t.isNull(e))throw new TypeError("Dump type cannot be null ! Expect a non empty string.");if(t.isUndefined(e))throw new TypeError("Dump type cannot be undefined ! Expect a non empty string.");this._dumpType=e}setDumpType(e){return this.dumpType=e,this}convert(e,r,t,n,s){e?(this._queue.push({file:e,parameters:r,onSuccess:t,onProgress:n,onError:s}),this._processQueue()):s("File cannot be null or empty, aborting file convertion !!!")}_processQueue(){if(0===this._queue.length||this._isProcessing)return;this._isProcessing=!0;const e=this,r=this._queue.shift(),n=r.file,s=r.parameters,a=r.onSuccess,i=r.onProgress,o=r.onError;if(t.isString(n))e._dumpFileInMemoryAs(e._dumpType,n,s,u,c,p);else{const r=n.data;switch(e._dumpType){case l.DumpType.ArrayBuffer:{const e=r.length,t=new ArrayBuffer(e),n=new Uint8Array(t);for(let t=0;t<e;++t)n[t]=r[t];u(t)}break;case l.DumpType.JSON:u(JSON.parse(r.toString()));break;case l.DumpType.String:u(r.toString());break;default:throw new RangeError(`Invalid switch parameter: ${e._dumpType}`)}}function u(r){e._convert(r,s,d,c,p)}function d(r){a(r),e._isProcessing=!1,e._processQueue()}function c(e){i(e)}function p(r){o(r),e._isProcessing=!1,e._processQueue()}}_dumpFileInMemoryAs(e,r,t,n,s,i){let o=!1;const d=a.createReadStream(r);d.on("error",e=>{o=!0,i(e)});const c=parseInt(t.fileSize),p=new u({bufferSize:c});p.on("error",e=>{o=!0,i(e)}),p.on("finish",()=>{if(!o){switch(e){case l.DumpType.ArrayBuffer:n(p.toArrayBuffer());break;case l.DumpType.String:n(p.toString());break;case l.DumpType.JSON:n(p.toJSON());break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}d.unpipe(),d.close(),p.end()}}),d.pipe(p)}_convert(){}}l.MAX_FILE_SIZE=67108864,l.DumpType=Object.freeze({ArrayBuffer:0,String:1,JSON:2});
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class d{static _registerRoutesTo(e,r,t,n,s){for(let a=0,i=s.length;a<i;a++){const i=s[a],o=new(n.get(i.controller.name))({driver:e,...i.controller.options}),u=t({mergeParams:!0});console.log(`\tAdd controller for base route: ${i.route}`),r.use(i.route,d._populateRouter(u,o,i.controller.can))}}static _populateRouter(e,r,t={}){for(let n in t){const s=t[n];console.log(`\t\tMap route ${s.over} on (${s.on}) to ${r.constructor.name}.${n} method.`),e[s.on](s.over,r[n].bind(r))}return e}constructor(e={}){const r={controllers:new Map,descriptors:[],...e};this.controllers=r.controllers,this.descriptors=r.descriptors,this.__dirname=void 0}get controllers(){return this._controllers}set controllers(e){if(t.isNull(e))throw new TypeError("Controllers cannot be null ! Expect a map of controller.");if(t.isUndefined(e))throw new TypeError("Controllers cannot be undefined ! Expect a map of controller.");if(!(e instanceof Map))throw new TypeError(`Controllers cannot be an instance of ${e.constructor.name} ! Expect a map of controller.`);this._controllers=e}get descriptors(){return this._descriptors}set descriptors(e){if(t.isNull(e))throw new TypeError("Descriptors cannot be null ! Expect an array of POJO.");if(t.isUndefined(e))throw new TypeError("Descriptors cannot be undefined ! Expect an array of POJO.");this._descriptors=e}addController(e){return this._controllers.set(e.name,e),this}addDescriptor(e){return this._descriptors.push(e),this}beforeRegisterRoutes(){}registerTo(e,r,t){this.beforeRegisterRoutes(e),d._registerRoutesTo(e,r,t,this._controllers,this._descriptors)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
const c=r({});exports.TPostgreSQLController=class extends o{constructor(e={}){const r={driver:null,tableName:"",tableFields:[],...e};super(r),this.tableName=r.tableName,this.tableFields=r.tableFields}get tableFields(){return this._tableFields}set tableFields(e){const r="Expect an instance of Array of String.";if(t.isNull(e))throw new TypeError(`Table fields cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`Table fields cannot be undefined ! ${r}`);let n="";for(let r=0,t=e.length;r<t;r++)n+=`${e[r]}, `;this._tableFields=n.slice(0,-2)}get tableName(){return this._tableName}set tableName(e){const r="Expect an instance of String.";if(t.isNull(e))throw new TypeError(`Table name cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`Table name cannot be undefined ! ${r}`);if(t.isNotString(e))throw new TypeError(`Table name cannot be an instance of ${e.constructor.name} ! ${r}`);this._tableName=e}setTableName(e){return this.tableName=e,this}_createMany(e,r){super._createOne(e,r);const t=[],n=[];let s=e.length,a=null,i=null,u=null,l=null,d=null,c=null,p=null;for(let h in e){a=e[h],i=Object.keys(a),u=Object.values(a),l=0,d="(",c="(";for(let e in i)l++,d+=`${e}, `,c+=`$${l}, `;d=d.slice(0,-2),c=c.slice(0,-2),d+=")",c+=")",p=`INSERT INTO ${this._tableName} ${d} VALUES ${c}`,this._driver.one(p,u).then(e=>{t.push(e)}).catch(e=>{n.push(e)}).finally(()=>{if(s--,s>0)return;const e=t.length>0,a=n.length>0;e&&a?o.returnErrorAndData(n,t,r):!e&&a?o.returnError(n,r):e&&!a?o.returnData(t,r):e||a||o.returnData(null,r)})}}_createOne(e,r){super._createOne(e,r);const t=Object.keys(e),n=Object.values(e);let s=0,a="(",i="(";for(let e in t)s++,a+=`${e}, `,i+=`$${s}, `;a=a.slice(0,-2),i=i.slice(0,-2),a+=")",i+=")";let u=`INSERT INTO ${this._tableName} ${a} VALUES ${i}`;this._driver.one(u,n).then(e=>{o.returnData(e,r)}).catch(e=>{o.returnError(e,r)})}_deleteAll(e){super._deleteAll(e),this._driver.one(` TRUNCATE TABLE ${this._tableName} `).then(r=>{o.returnData(r,e)}).catch(r=>{o.returnError(r,e)})}_deleteMany(e,r){super._deleteMany(e,r),this._driver.any(` DELETE FROM ${this._tableName} WHERE id IN ($1:list) `,[e]).then(e=>{o.returnData(e,r)}).catch(e=>{o.returnError(e,r)})}_deleteOne(e,r){super._deleteOne(e,r),this._driver.one(` DELETE FROM ${this._tableName} WHERE id=$1 `,[e]).then(e=>{o.returnData(e,r)}).catch(e=>{o.returnError(e,r)})}_deleteWhere(e,r){super._deleteWhere(e,r),o.returnError("DeleteWhere method is not implemented yet ! Sorry for the disagrement.",r)}_readAll(e,r){super._readAll(e,r),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} `).then(e=>{o.returnData(e,r)}).catch(e=>{o.returnError(e,r)})}_readMany(e,r,t){super._readMany(e,r,t),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE id IN ($1:list)`,[e]).then(e=>{o.returnData(e,t)}).catch(e=>{o.returnError(e,t)})}_readOne(e,r,t){super._readOne(e,r,t),this._driver.one(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE id = $1 `,[e]).then(e=>{o.returnData(e,t)}).catch(e=>{o.returnError(e,t)})}_readWhere(e,r,t){super._readWhere(e,r,t),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE ${r}`).then(e=>{o.returnData(e,t)}).catch(e=>{o.returnError(e,t)})}_updateAll(e,r){super._updateAll(e,r),o.returnError("UpdateAll method is not implemented yet ! Sorry for the disagrement.",r)}_updateMany(e,r,t){super._updateMany(e,r,t);const n=e.length,s=r.length;if(n!==s)return void o.returnError("Number of ids doesn't match the number of updates. Abort updates !",t);const a=[],i=[];let u=n,l=null,d=null,c=null,p=null,h=null,f=null,m=null,_=null;for(let n=0;n<s;n++){l=e[n],d=r[n],c=Object.keys(d),p=Object.values(d),h=1,f="";for(let e in c)h++,f+=`${e}=$${h}, `;f=f.slice(0,-2),f+=")",m=` UPDATE ${this._tableName} SET ${f} WHERE id=$1 `,_=[l].concat(p),this._driver.one(m,_).then(e=>{a.push(e)}).catch(e=>{i.push(e)}).finally(()=>{if(u--,u>0)return;const e=a.length>0,r=i.length>0;e&&r?o.returnErrorAndData(i,a,t):!e&&r?o.returnError(i,t):e&&!r?o.returnData(a,t):e||r||o.returnData(null,t)})}}_updateOne(e,r,t){super._updateOne(e,r,t);const n=Object.keys(r),s=Object.values(r);let a=1,i="";for(let e in n)a++,i+=`${e}=$${a}, `;i=i.slice(0,-2),i+=")";let u=` UPDATE ${this._tableName} SET ${i} WHERE id=$1 `,l=[e].concat(s);this._driver.one(u,l).then(e=>{o.returnData(e,t)}).catch(e=>{o.returnError(e,t)})}_updateWhere(e,r,t){super._updateWhere(e,r,t),o.returnError("UpdateWhere method is not implemented yet ! Sorry for the disagrement.",t)}},exports.TPostgreSQLDatabase=class extends class{constructor(e={}){const r={driver:null,application:null,router:null,plugins:[],...e};this.driver=r.driver,this.application=r.application,this.router=r.router,this.plugins=r.plugins,this.init(),this._registerPlugins()}get plugins(){return this._plugins}set plugins(e){if(t.isNull(e))throw new TypeError("Plugins cannot be null ! Expect an array of TDatabasePlugin.");if(t.isUndefined(e))throw new TypeError("Plugins cannot be undefined ! Expect an array of TDatabasePlugin.");this._plugins=e}get router(){return this._router}set router(e){if(t.isNull(e))throw new TypeError("Router cannot be null ! Expect a Express Router.");if(t.isUndefined(e))throw new TypeError("Router cannot be undefined ! Expect a Express Router.");this._router=e}get application(){return this._application}set application(e){if(t.isNull(e))throw new TypeError("Application cannot be null ! Expect a Express Application.");if(t.isUndefined(e))throw new TypeError("Application cannot be undefined ! Expect a Express Application.");this._application=e}get driver(){return this._driver}set driver(e){if(t.isNull(e))throw new TypeError("Driver cannot be null ! Expect a database driver.");if(t.isUndefined(e))throw new TypeError("Driver cannot be undefined ! Expect a database driver.");this._driver=e}setPlugins(e){return this.plugins=e,this}setRouter(e){return this.router=e,this}setApplication(e){return this.application=e,this}setDriver(e){return this.driver=e,this}init(){}_registerPlugins(){for(let[e,r]of Object.entries(this._plugins))this._registerPackagePlugin(e,r)?console.log(`Use ${e} plugin from node_modules`):this._registerLocalPlugin(e,r)?console.log(`Use ${e} plugin from local folder`):console.error(`Unable to register the plugin ${e} the package or local folder doesn't seem to exist ! Skip it.`)}_registerPackagePlugin(e){let r=!1;try{const t=require(e);t instanceof d?(t.__dirname=n.dirname(require.resolve(e)),t.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||console.error(e)}return r}_registerLocalPlugin(e){let r=!1;try{const t=n.join(__dirname,"../../../","databases/plugins/",e,`${e}.js`),s=require(t);s instanceof d?(s.__dirname=n.dirname(require.resolve(t)),s.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){console.error(e)}return r}connect(){}close(){}on(){}}{constructor(e={}){const r={host:"localhost",port:"5432",database:"postgres",...e,driver:c};super(r),this._host=r.host,this._port=r.port,this._database=r.database}close(){}connect(){this._driver.one(" SELECT 1 ",[]).then(e=>{console.log(`PostgreSQL at ${this._host}:${this._port}/${this._database} is connected ! ${e}`)}).catch(e=>{console.log("PostgreSQL - Connection error ",e)})}init(){super.init()}on(){}};
