"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("itee-database"),e=require("itee-validators");function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var a=r(require("pg-promise"));
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class n extends t.TAbstractDatabase{static formatConnectionString(t){let r="";const{user:a,password:n,host:l,port:s,database:o}=t;return r=e.isDefined(a)&&e.isDefined(n)?`postgres://${a}:${n}@${l}:${s}/${o}`:`postgres://${l}:${s}/${o}`,r}constructor(t={}){const e={host:"localhost",port:"5432",database:"postgres",...t,driver:a.default({})(n.formatConnectionString(t))};super(e),this._user=e.user,this._password=e.password,this._host=e.host,this._port=e.port,this._database=e.database}init(){super.init()}connect(){this.driver.one(" SELECT 1 ",[]).then((()=>{this.logger.log(`PostgreSQL at postgres://${this._host}:${this._port}/${this._database} is connected !`)})).catch((t=>{this.logger.log("PostgreSQL - Connection error ",t)}))}on(){}close(t){this.driver.end(),t()}}class l extends t.TAbstractDataController{constructor(t={}){const e={driver:null,tableName:"",tableFields:[],...t};super(e),this.tableName=e.tableName,this.tableFields=e.tableFields}get tableFields(){return this._tableFields}set tableFields(t){const r="Expect an instance of Array of String.";if(e.isNull(t))throw new TypeError(`Table fields cannot be null ! ${r}`);if(e.isUndefined(t))throw new TypeError(`Table fields cannot be undefined ! ${r}`);let a="";for(let e=0,r=t.length;e<r;e++)a+=`${t[e]}, `;this._tableFields=a.slice(0,-2)}get tableName(){return this._tableName}set tableName(t){const r="Expect an instance of String.";if(e.isNull(t))throw new TypeError(`Table name cannot be null ! ${r}`);if(e.isUndefined(t))throw new TypeError(`Table name cannot be undefined ! ${r}`);if(e.isNotString(t))throw new TypeError(`Table name cannot be an instance of ${t.constructor.name} ! ${r}`);this._tableName=t}setTableName(t){return this.tableName=t,this}_createMany(e,r){super._createOne(e,r);const a=[],n=[];let l=e.length,s=null,o=null,i=null,c=null,u=null,h=null,d=null;for(let b in e){s=e[b],o=Object.keys(s),i=Object.values(s),c=0,u="(",h="(";for(let t in o)c++,u+=`${t}, `,h+=`$${c}, `;u=u.slice(0,-2),h=h.slice(0,-2),u+=")",h+=")",d=`INSERT INTO ${this._tableName} ${u} VALUES ${h}`,this._driver.one(d,i).then((t=>{a.push(t)})).catch((t=>{n.push(t)})).finally((()=>{if(l--,l>0)return;const e=a.length>0,s=n.length>0;e&&s?t.TAbstractDataController.returnErrorAndData(n,a,r):!e&&s?t.TAbstractDataController.returnError(n,r):e&&!s?t.TAbstractDataController.returnData(a,r):e||s||t.TAbstractDataController.returnData(null,r)}))}}_createOne(e,r){super._createOne(e,r);const a=Object.keys(e),n=Object.values(e);let l=0,s="(",o="(";for(let t in a)l++,s+=`${t}, `,o+=`$${l}, `;s=s.slice(0,-2),o=o.slice(0,-2),s+=")",o+=")";let i=`INSERT INTO ${this._tableName} ${s} VALUES ${o}`;this._driver.one(i,n).then((e=>{t.TAbstractDataController.returnData(e,r)})).catch((e=>{t.TAbstractDataController.returnError(e,r)}))}_deleteAll(e){super._deleteAll(e),this._driver.one(` TRUNCATE TABLE ${this._tableName} `).then((r=>{t.TAbstractDataController.returnData(r,e)})).catch((r=>{t.TAbstractDataController.returnError(r,e)}))}_deleteMany(e,r){super._deleteMany(e,r),this._driver.any(` DELETE FROM ${this._tableName} WHERE id IN ($1:list) `,[e]).then((e=>{t.TAbstractDataController.returnData(e,r)})).catch((e=>{t.TAbstractDataController.returnError(e,r)}))}_deleteOne(e,r){super._deleteOne(e,r),this._driver.one(` DELETE FROM ${this._tableName} WHERE id=$1 `,[e]).then((e=>{t.TAbstractDataController.returnData(e,r)})).catch((e=>{t.TAbstractDataController.returnError(e,r)}))}_deleteWhere(e,r){super._deleteWhere(e,r),t.TAbstractDataController.returnError("DeleteWhere method is not implemented yet ! Sorry for the disagrement.",r)}_readAll(e,r){super._readAll(e,r),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} `).then((e=>{t.TAbstractDataController.returnData(e,r)})).catch((e=>{t.TAbstractDataController.returnError(e,r)}))}_readMany(e,r,a){super._readMany(e,r,a),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE id IN ($1:list)`,[e]).then((e=>{t.TAbstractDataController.returnData(e,a)})).catch((e=>{t.TAbstractDataController.returnError(e,a)}))}_readOne(e,r,a){super._readOne(e,r,a),this._driver.one(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE id = $1 `,[e]).then((e=>{t.TAbstractDataController.returnData(e,a)})).catch((e=>{t.TAbstractDataController.returnError(e,a)}))}_readWhere(e,r,a){super._readWhere(e,r,a),this._driver.any(` SELECT ${this._tableFields} FROM ${this._tableName} WHERE ${r}`).then((e=>{t.TAbstractDataController.returnData(e,a)})).catch((e=>{t.TAbstractDataController.returnError(e,a)}))}_updateAll(e,r){super._updateAll(e,r),t.TAbstractDataController.returnError("UpdateAll method is not implemented yet ! Sorry for the disagrement.",r)}_updateMany(e,r,a){super._updateMany(e,r,a);const n=e.length,l=r.length;if(n!==l)return void t.TAbstractDataController.returnError("Number of ids doesn't match the number of updates. Abort updates !",a);const s=[],o=[];let i=n,c=null,u=null,h=null,d=null,b=null,_=null,E=null,T=null;for(let n=0;n<l;n++){c=e[n],u=r[n],h=Object.keys(u),d=Object.values(u),b=1,_="";for(let t in h)b++,_+=`${t}=$${b}, `;_=_.slice(0,-2),_+=")",E=` UPDATE ${this._tableName} SET ${_} WHERE id=$1 `,T=[c].concat(d),this._driver.one(E,T).then((t=>{s.push(t)})).catch((t=>{o.push(t)})).finally((()=>{if(i--,i>0)return;const e=s.length>0,r=o.length>0;e&&r?t.TAbstractDataController.returnErrorAndData(o,s,a):!e&&r?t.TAbstractDataController.returnError(o,a):e&&!r?t.TAbstractDataController.returnData(s,a):e||r||t.TAbstractDataController.returnData(null,a)}))}}_updateOne(e,r,a){super._updateOne(e,r,a);const n=Object.keys(r),l=Object.values(r);let s=1,o="";for(let t in n)s++,o+=`${t}=$${s}, `;o=o.slice(0,-2),o+=")";let i=` UPDATE ${this._tableName} SET ${o} WHERE id=$1 `,c=[e].concat(l);this._driver.one(i,c).then((e=>{t.TAbstractDataController.returnData(e,a)})).catch((e=>{t.TAbstractDataController.returnError(e,a)}))}_updateWhere(e,r,a){super._updateWhere(e,r,a),t.TAbstractDataController.returnError("UpdateWhere method is not implemented yet ! Sorry for the disagrement.",a)}}exports.TPostgreSQLController=l,exports.TPostgreSQLDatabase=n;
